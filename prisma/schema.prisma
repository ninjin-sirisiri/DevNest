datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isAnonymous   Boolean         @default(true) // New field for anonymous mode
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  threads Thread[]
  posts   Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Thread {
  id          String   @id @default(uuid())
  title       String
  description String
  createAt    DateTime @default(now()) @map("created_at")
  isPinned    Boolean  @default(false) // New field for pinning threads

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts  Post[]
  tags   Tag[]
}

model Post {
  id       String   @id @default(uuid())
  content  String
  createAt DateTime @default(now())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  threadId String @map("thread_id")
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  parentId String? @map("parent_id")
  parent   Post?   @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Post[]  @relation("PostReplies")

  tags Tag[]
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  posts   Post[]
  threads Thread[]
}
